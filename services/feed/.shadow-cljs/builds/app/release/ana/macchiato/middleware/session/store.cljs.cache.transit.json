["^ ","~:output",["^ ","~:js","goog.provide('macchiato.middleware.session.store');\n\n/**\n * An interface to a session storage engine. Implementing this protocol allows\n *   session data to be stored in different places.\n *   Session keys are exposed to end users via a cookie, and therefore must be\n *   unguessable. A random UUID is a good choice for a session key.\n *   Session stores should come with a mechanism for expiring old session data.\n * @interface\n */\nmacchiato.middleware.session.store.SessionStore = function(){};\n\nvar macchiato$middleware$session$store$SessionStore$read_session$dyn_17833 = (function (store,key){\nvar x__4428__auto__ = (((store == null))?null:store);\nvar m__4429__auto__ = (macchiato.middleware.session.store.read_session[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(store,key) : m__4429__auto__.call(null,store,key));\n} else {\nvar m__4426__auto__ = (macchiato.middleware.session.store.read_session[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(store,key) : m__4426__auto__.call(null,store,key));\n} else {\nthrow cljs.core.missing_protocol(\"SessionStore.read-session\",store);\n}\n}\n});\n/**\n * Read a session map from the store. If the key is not found, nil\n *  is returned.\n */\nmacchiato.middleware.session.store.read_session = (function macchiato$middleware$session$store$read_session(store,key){\nif((((!((store == null)))) && ((!((store.macchiato$middleware$session$store$SessionStore$read_session$arity$2 == null)))))){\nreturn store.macchiato$middleware$session$store$SessionStore$read_session$arity$2(store,key);\n} else {\nreturn macchiato$middleware$session$store$SessionStore$read_session$dyn_17833(store,key);\n}\n});\n\nvar macchiato$middleware$session$store$SessionStore$write_session$dyn_17840 = (function (store,key,data){\nvar x__4428__auto__ = (((store == null))?null:store);\nvar m__4429__auto__ = (macchiato.middleware.session.store.write_session[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$3(store,key,data) : m__4429__auto__.call(null,store,key,data));\n} else {\nvar m__4426__auto__ = (macchiato.middleware.session.store.write_session[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$3 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$3(store,key,data) : m__4426__auto__.call(null,store,key,data));\n} else {\nthrow cljs.core.missing_protocol(\"SessionStore.write-session\",store);\n}\n}\n});\n/**\n * Write a session map to the store. Returns the (possibly changed) key under\n *  which the data was stored. If the key is nil, the session is considered\n *  to be new, and a fresh key should be generated.\n */\nmacchiato.middleware.session.store.write_session = (function macchiato$middleware$session$store$write_session(store,key,data){\nif((((!((store == null)))) && ((!((store.macchiato$middleware$session$store$SessionStore$write_session$arity$3 == null)))))){\nreturn store.macchiato$middleware$session$store$SessionStore$write_session$arity$3(store,key,data);\n} else {\nreturn macchiato$middleware$session$store$SessionStore$write_session$dyn_17840(store,key,data);\n}\n});\n\nvar macchiato$middleware$session$store$SessionStore$delete_session$dyn_17843 = (function (store,key){\nvar x__4428__auto__ = (((store == null))?null:store);\nvar m__4429__auto__ = (macchiato.middleware.session.store.delete_session[goog.typeOf(x__4428__auto__)]);\nif((!((m__4429__auto__ == null)))){\nreturn (m__4429__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4429__auto__.cljs$core$IFn$_invoke$arity$2(store,key) : m__4429__auto__.call(null,store,key));\n} else {\nvar m__4426__auto__ = (macchiato.middleware.session.store.delete_session[\"_\"]);\nif((!((m__4426__auto__ == null)))){\nreturn (m__4426__auto__.cljs$core$IFn$_invoke$arity$2 ? m__4426__auto__.cljs$core$IFn$_invoke$arity$2(store,key) : m__4426__auto__.call(null,store,key));\n} else {\nthrow cljs.core.missing_protocol(\"SessionStore.delete-session\",store);\n}\n}\n});\n/**\n * Delete a session map from the store, and returns the session key. If the\n *  returned key is nil, the session cookie will be removed.\n */\nmacchiato.middleware.session.store.delete_session = (function macchiato$middleware$session$store$delete_session(store,key){\nif((((!((store == null)))) && ((!((store.macchiato$middleware$session$store$SessionStore$delete_session$arity$2 == null)))))){\nreturn store.macchiato$middleware$session$store$SessionStore$delete_session$arity$2(store,key);\n} else {\nreturn macchiato$middleware$session$store$SessionStore$delete_session$dyn_17843(store,key);\n}\n});\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","protocol for defining session storage engines.","~:file","macchiato/middleware/session/store.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",39],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$macchiato.middleware.session.store","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^J","~$goog","^K"],"~:seen",["^C",[]],"~:uses",null,"~:require-macros",["^ ","^J","^J"],"~:form",["~#list",["~$ns","^E","protocol for defining session storage engines."]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^K","^J"]],"^G","^E","~:resource-id",["~:shadow.build.classpath/resource","macchiato/middleware/session/store.cljs"],"~:compiled-at",1719701912304,"~:resource-name","macchiato/middleware/session/store.cljs","~:warnings",[],"~:source","(ns macchiato.middleware.session.store\n  \"protocol for defining session storage engines.\")\n\n(defprotocol SessionStore\n  \"An interface to a session storage engine. Implementing this protocol allows\n  session data to be stored in different places.\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n  Session stores should come with a mechanism for expiring old session data.\"\n  (read-session [store key]\n    \"Read a session map from the store. If the key is not found, nil\n    is returned.\")\n  (write-session [store key data]\n    \"Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.\")\n  (delete-session [store key]\n    \"Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.\"))\n","~:reader-features",["^C",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAGA,AAAA;AAAA;;;;;;;;AAAA,AAAaW;;AAAb,AAAAX,AAAA,AAMiBY,AAAMC;AANvB,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAA,AAMiBW,AAAAA;AANjBV,AAAA,AAAAC,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMiBU,AAAAA,AAAMC,AAAAA;;AANvB,AAAAR,AAAA,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAMiBO,AAAAA,AAAMC,AAAAA;;AANvB,AAAA,AAAAP,AAAA,AAMiBM;;;;AANjB,AAAA;;;;AAAA,AAMGT,AAAcS,AAAMC;AANvB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMiBD,AAAAA;AANjB,AAMiBA,AAAAA,AAAMC;;AANvB,AAAAb,AAMiBY,AAAMC;;;;AANvB,AAAAN,AAAA,AASkBK,AAAMC,AAAIC;AAT5B,AAAA,AAAAb,AAAA,AAAA,AAAA,AAAA,AASkBW,AAAAA;AATlBV,AAAA,AAAAM,AAAA,AAAAJ,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASkBU,AAAAA,AAAMC,AAAAA,AAAIC,AAAAA;;AAT5B,AAAAT,AAAA,AAAAG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AASkBO,AAAAA,AAAMC,AAAAA,AAAIC,AAAAA;;AAT5B,AAAA,AAAAR,AAAA,AASkBM;;;;AATlB,AAAA;;;;;AAAA,AASGJ,AAAeI,AAAMC,AAAIC;AAT5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AASkBF,AAAAA;AATlB,AASkBA,AAAAA,AAAMC,AAAIC;;AAT5B,AAAAP,AASkBK,AAAMC,AAAIC;;;;AAT5B,AAAAL,AAAA,AAamBG,AAAMC;AAbzB,AAAA,AAAAZ,AAAA,AAAA,AAAA,AAAA,AAamBW,AAAAA;AAbnBV,AAAA,AAAAQ,AAAA,AAAAN,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAamBU,AAAAA,AAAMC,AAAAA;;AAbzB,AAAAR,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAL,AAAA;AAAA,AAAAA,AAAAA,AAAAA,AAamBO,AAAAA,AAAMC,AAAAA;;AAbzB,AAAA,AAAAP,AAAA,AAamBM;;;;AAbnB,AAAA;;;;AAAA,AAaGF,AAAgBE,AAAMC;AAbzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAamBD,AAAAA;AAbnB,AAamBA,AAAAA,AAAMC;;AAbzB,AAAAJ,AAamBG,AAAMC;;;;AAbzB","names",["macchiato$middleware$session$store$SessionStore$read_session$dyn","x__4428__auto__","m__4429__auto__","macchiato.middleware.session.store/read-session","goog/typeOf","m__4426__auto__","cljs.core/missing-protocol","macchiato$middleware$session$store$SessionStore$write_session$dyn","macchiato.middleware.session.store/write-session","macchiato$middleware$session$store$SessionStore$delete_session$dyn","macchiato.middleware.session.store/delete-session","macchiato.middleware.session.store/SessionStore","store","key","data"]],"~:used-vars",["^C",["~$macchiato.middleware.session.store/read-session","~$macchiato.middleware.session.store/delete-session","~$cljs.core/not","~$macchiato.middleware.session.store/write-session","~$macchiato.middleware.session.store/SessionStore"]]],"~:cache-keys",["~#cmap",[["^V","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^C",[]],"~:deps-syms",["^K","~$goog.dom.HtmlElement"]]],["^V","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","~$goog.array","~$goog.asserts"]]],["^V","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^V","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1F"]]],["^V","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C"]]],["^V","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C"]]],"~:SHADOW-TIMESTAMP",[1719461811000,1719461811000,1719461795000],["^V","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","~$goog.reflect"]]],["^V","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","~$goog.html.trustedtypes","^1I","^1J","^1K","^1L"]]],["^V","macchiato/middleware/session/store.cljs"],["94182c6467e2c436440184eb2b5c2d27bf9d3120","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^J"]]],["^V","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","~$goog.html.SafeUrl","^1K","^1L","^1F"]]],["^V","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1P","^1H","~$goog.html.uncheckedconversions","^1K","^1F"]]],["^V","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^V","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","~$goog.dom.TagName","~$goog.dom.tags","^1T","^1U","~$goog.html.SafeStyleSheet","^1P","^1H","^1O","^1I","^1J","~$goog.labs.userAgent.browser","^1E","^1K","^1L","^1F"]]],["^V","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1E"]]],["^V","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^V","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^V","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",[]]],["^V","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1E"]]],["^V","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","~$goog.dom.safe","^1V","^1K","^1F"]]],["^V","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1F"]]],["^V","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","^1R","~$goog.math"]]],["^V","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","^1S","^1T","^1U","^1[","^1P","^1H","^1K","^1F"]]],["^V","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K"]]],["^V","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","~$goog.math.Long","~$goog.math.Integer","^23","^1E","^1B","~$goog.Uri","~$goog.string.StringBuffer"]]],["^V","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","^1O","^1K","^1L"]]],["^V","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","^1U","^1E","^1K","^1L","^1F"]]],["^V","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1N"]]],["^V","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1B","^1C","^23"]]],["^V","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^1=",["^ ","^1>",null,"^1?",["^C",[]],"^1@",["^K","^1C","^1L"]]]]],"~:clj-info",["^ ","jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1719461795000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","protocol for defining session storage engines.","^7","macchiato/middleware/session/store.cljs","^8",1,"^9",5,"^:",1,"^;",39],"^<",["^ ","^=","^>","^?","^@"],"~:shadow/protocol-prefixes",["^C",["macchiato$middleware$session$store$SessionStore$"]],"^A",null,"^B",["^C",[]],"^D","^E","^H",null,"^I",["^ ","^J","^J","^K","^K"],"^L",["^C",[]],"^M",null,"~:defs",["^ ","~$SessionStore",["^ ","^5",["^ ","~:protocol-symbol",true,"^7","macchiato/middleware/session/store.cljs","^;",26,"^9",14,"^8",4,"~:protocol-info",["^ ","~:methods",["^ ","~$read-session",[["~$store","~$key"]],"~$write-session",[["^34","^35","~$data"]],"~$delete-session",[["^34","^35"]]]],"^:",4,"~:sigs",["^ ","~:read-session",["^ ","^D","^33","~:arglists",["^P",[["^34","^35"]]],"^6","Read a session map from the store. If the key is not found, nil\n    is returned."],"~:write-session",["^ ","^D","^36","^3;",["^P",[["^34","^35","^37"]]],"^6","Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated."],"~:delete-session",["^ ","^D","^38","^3;",["^P",[["^34","^35"]]],"^6","Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed."]],"^6","An interface to a session storage engine. Implementing this protocol allows\n  session data to be stored in different places.\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n  Session stores should come with a mechanism for expiring old session data.","~:jsdoc",["^P",["@interface"]]],"^30",true,"^D","^1:","^7","macchiato/middleware/session/store.cljs","^;",26,"^9",1,"^8",4,"^31",["^ ","^32",["^ ","^33",[["^34","^35"]],"^36",[["^34","^35","^37"]],"^38",[["^34","^35"]]]],"~:info",null,"^:",4,"~:tag","~$any","^39",["^ ","^3:",["^ ","^D","^33","^3;",["^P",[["^34","^35"]]],"^6","Read a session map from the store. If the key is not found, nil\n    is returned."],"^3<",["^ ","^D","^36","^3;",["^P",[["^34","^35","^37"]]],"^6","Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated."],"^3=",["^ ","^D","^38","^3;",["^P",[["^34","^35"]]],"^6","Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed."]],"~:impls",["^C",[]],"^6","An interface to a session storage engine. Implementing this protocol allows\n  session data to be stored in different places.\n  Session keys are exposed to end users via a cookie, and therefore must be\n  unguessable. A random UUID is a good choice for a session key.\n  Session stores should come with a mechanism for expiring old session data.","^3>",["^P",["@interface"]]],"^33",["^ ","~:protocol-inline",null,"^5",["^ ","^7","macchiato/middleware/session/store.cljs","^8",10,"^9",4,"^:",10,"^;",16,"~:protocol","^1:","^6","Read a session map from the store. If the key is not found, nil\n    is returned.","^3;",["^P",["~$quote",["^P",[["^34","^35"]]]]]],"^3D","^1:","^D","^16","^7","macchiato/middleware/session/store.cljs","^;",16,"~:method-params",["^P",[["^34","^35"]]],"~:protocol-impl",null,"~:arglists-meta",["^P",[null,null]],"^9",1,"~:variadic?",false,"^8",4,"~:ret-tag","^3A","^:",10,"~:max-fixed-arity",2,"~:fn-var",true,"^3;",["^P",["^3E",["^P",[["^34","^35"]]]]],"^6","Read a session map from the store. If the key is not found, nil\n    is returned."],"^36",["^ ","^3C",null,"^5",["^ ","^7","macchiato/middleware/session/store.cljs","^8",13,"^9",4,"^:",13,"^;",17,"^3D","^1:","^6","Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated.","^3;",["^P",["^3E",["^P",[["^34","^35","^37"]]]]]],"^3D","^1:","^D","^19","^7","macchiato/middleware/session/store.cljs","^;",17,"^3F",["^P",[["^34","^35","^37"]]],"^3G",null,"^3H",["^P",[null,null]],"^9",1,"^3I",false,"^8",4,"^3J","^3A","^:",13,"^3K",3,"^3L",true,"^3;",["^P",["^3E",["^P",[["^34","^35","^37"]]]]],"^6","Write a session map to the store. Returns the (possibly changed) key under\n    which the data was stored. If the key is nil, the session is considered\n    to be new, and a fresh key should be generated."],"^38",["^ ","^3C",null,"^5",["^ ","^7","macchiato/middleware/session/store.cljs","^8",17,"^9",4,"^:",17,"^;",18,"^3D","^1:","^6","Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed.","^3;",["^P",["^3E",["^P",[["^34","^35"]]]]]],"^3D","^1:","^D","^17","^7","macchiato/middleware/session/store.cljs","^;",18,"^3F",["^P",[["^34","^35"]]],"^3G",null,"^3H",["^P",[null,null]],"^9",1,"^3I",false,"^8",4,"^3J","^3A","^:",17,"^3K",2,"^3L",true,"^3;",["^P",["^3E",["^P",[["^34","^35"]]]]],"^6","Delete a session map from the store, and returns the session key. If the\n    returned key is nil, the session cookie will be removed."]],"^N",["^ ","^J","^J"],"^R",["^ "],"^S",["^ "],"^T",["^K","^J"]],"^G","^E","~:ns-specs",["^ "],"~:ns-spec-vars",["^C",[]],"~:compiler-options",["^1<",[["^3O","~:static-fns"],true,["^3O","~:shadow-tweaks"],null,["^3O","~:source-map-inline"],null,["^3O","~:elide-asserts"],true,["^3O","~:optimize-constants"],null,["^3O","^Y"],null,["^3O","~:external-config"],null,["^3O","~:tooling-config"],null,["^3O","~:emit-constants"],null,["^3O","~:load-tests"],false,["^3O","~:form-size-threshold"],null,["^3O","~:infer-externs"],true,["^3O","^["],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:release",["^3O","~:fn-invoke-direct"],null,["^3O","~:source-map"],null]]]
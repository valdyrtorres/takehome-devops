["^ ","~:output",["^ ","~:js","goog.provide('macchiato.middleware.restful_format');\nmacchiato.middleware.restful_format.concat_stream = (cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1 ? cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1(\"concat-stream\") : cljs.nodejs.require.call(null,\"concat-stream\"));\nmacchiato.middleware.restful_format.ct = (cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1 ? cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1(\"content-type\") : cljs.nodejs.require.call(null,\"content-type\"));\nmacchiato.middleware.restful_format.lru = (function (){var LRUCache = (cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1 ? cljs.nodejs.require.cljs$core$IFn$_invoke$arity$1(\"lru\") : cljs.nodejs.require.call(null,\"lru\"));\nreturn (new LRUCache(({\"maxElementsToStore\": (500)})));\n})();\nmacchiato.middleware.restful_format.parse_accept_header = (function macchiato$middleware$restful_format$parse_accept_header(accept_header){\nvar or__4126__auto__ = macchiato.middleware.restful_format.lru.get(accept_header);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nvar parsed_header = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__14936_SHARP_){\nreturn [cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(p1__14936_SHARP_)),\"/\",cljs.core.str.cljs$core$IFn$_invoke$arity$1(new cljs.core.Keyword(null,\"sub-type\",\"sub-type\",-997954412).cljs$core$IFn$_invoke$arity$1(p1__14936_SHARP_))].join('');\n}),macchiato.util.request.accept(accept_header));\nmacchiato.middleware.restful_format.lru.set(accept_header,parsed_header);\n\nreturn parsed_header;\n}\n});\nmacchiato.middleware.restful_format.default_content_types = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"application/json\",null,\"application/transit+json\",null], null), null);\nmacchiato.middleware.restful_format.default_accept_types = new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [\"application/json\",null,\"application/transit+json\",null], null), null);\nmacchiato.middleware.restful_format.deserialize_request = (function (){var method_table__4619__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4620__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4621__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4622__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4623__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__14937 = cljs.core.get_global_hierarchy;\nreturn (fexpr__14937.cljs$core$IFn$_invoke$arity$0 ? fexpr__14937.cljs$core$IFn$_invoke$arity$0() : fexpr__14937.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"macchiato.middleware.restful-format\",\"deserialize-request\"),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4623__auto__,method_table__4619__auto__,prefer_table__4620__auto__,method_cache__4621__auto__,cached_hierarchy__4622__auto__));\n})();\nmacchiato.middleware.restful_format.deserialize_request.cljs$core$IMultiFn$_add_method$arity$3(null,\"application/json\",(function (p__14938){\nvar map__14939 = p__14938;\nvar map__14939__$1 = (((((!((map__14939 == null))))?(((((map__14939.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14939.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14939):map__14939);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14939__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar keywordize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14939__$1,new cljs.core.Keyword(null,\"keywordize?\",\"keywordize?\",-234306912));\nreturn cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(JSON.parse(body),cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize-keys\",\"keywordize-keys\",1310784252),keywordize_QMARK_], 0));\n}));\nmacchiato.middleware.restful_format.deserialize_request.cljs$core$IMultiFn$_add_method$arity$3(null,\"application/transit+json\",(function (p__14941){\nvar map__14942 = p__14941;\nvar map__14942__$1 = (((((!((map__14942 == null))))?(((((map__14942.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14942.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14942):map__14942);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14942__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar transit_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14942__$1,new cljs.core.Keyword(null,\"transit-opts\",\"transit-opts\",1104386010));\nvar reader = cognitect.transit.reader.cljs$core$IFn$_invoke$arity$2((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(transit_opts);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"json\",\"json\",1279968570);\n}\n})(),new cljs.core.Keyword(null,\"opts\",\"opts\",155075701).cljs$core$IFn$_invoke$arity$1(transit_opts));\nreturn cognitect.transit.read(reader,body);\n}));\nmacchiato.middleware.restful_format.serialize_response = (function (){var method_table__4619__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar prefer_table__4620__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar method_cache__4621__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar cached_hierarchy__4622__auto__ = cljs.core.atom.cljs$core$IFn$_invoke$arity$1(cljs.core.PersistentArrayMap.EMPTY);\nvar hierarchy__4623__auto__ = cljs.core.get.cljs$core$IFn$_invoke$arity$3(cljs.core.PersistentArrayMap.EMPTY,new cljs.core.Keyword(null,\"hierarchy\",\"hierarchy\",-1053470341),(function (){var fexpr__14951 = cljs.core.get_global_hierarchy;\nreturn (fexpr__14951.cljs$core$IFn$_invoke$arity$0 ? fexpr__14951.cljs$core$IFn$_invoke$arity$0() : fexpr__14951.call(null));\n})());\nreturn (new cljs.core.MultiFn(cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(\"macchiato.middleware.restful-format\",\"serialize-response\"),new cljs.core.Keyword(null,\"type\",\"type\",1174270348),new cljs.core.Keyword(null,\"default\",\"default\",-1987822328),hierarchy__4623__auto__,method_table__4619__auto__,prefer_table__4620__auto__,method_cache__4621__auto__,cached_hierarchy__4622__auto__));\n})();\nmacchiato.middleware.restful_format.serialize_response.cljs$core$IMultiFn$_add_method$arity$3(null,\"application/json\",(function (p__14955){\nvar map__14956 = p__14955;\nvar map__14956__$1 = (((((!((map__14956 == null))))?(((((map__14956.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14956.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14956):map__14956);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14956__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nreturn JSON.stringify(cljs.core.clj__GT_js(body));\n}));\nmacchiato.middleware.restful_format.serialize_response.cljs$core$IMultiFn$_add_method$arity$3(null,\"application/transit+json\",(function (p__14958){\nvar map__14959 = p__14958;\nvar map__14959__$1 = (((((!((map__14959 == null))))?(((((map__14959.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14959.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14959):map__14959);\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14959__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar transit_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14959__$1,new cljs.core.Keyword(null,\"transit-opts\",\"transit-opts\",1104386010));\nvar writer = cognitect.transit.writer.cljs$core$IFn$_invoke$arity$2((function (){var or__4126__auto__ = new cljs.core.Keyword(null,\"type\",\"type\",1174270348).cljs$core$IFn$_invoke$arity$1(transit_opts);\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn new cljs.core.Keyword(null,\"json\",\"json\",1279968570);\n}\n})(),new cljs.core.Keyword(null,\"opts\",\"opts\",155075701).cljs$core$IFn$_invoke$arity$1(transit_opts));\nreturn cognitect.transit.write(writer,body);\n}));\nmacchiato.middleware.restful_format.infer_request_content_type = (function macchiato$middleware$restful_format$infer_request_content_type(headers,content_types){\nvar temp__5735__auto__ = (function (){var G__14961 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(headers,\"content-type\");\nif((G__14961 == null)){\nreturn null;\n} else {\nreturn macchiato.middleware.restful_format.ct.parse(G__14961);\n}\n})();\nif(cljs.core.truth_(temp__5735__auto__)){\nvar content_type = temp__5735__auto__;\nvar temp__5735__auto____$1 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(content_types,content_type.type);\nif(cljs.core.truth_(temp__5735__auto____$1)){\nvar type = temp__5735__auto____$1;\nreturn new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),type], null);\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nmacchiato.middleware.restful_format.infer_response_content_type = (function macchiato$middleware$restful_format$infer_response_content_type(p__14967,accept_types){\nvar map__14970 = p__14967;\nvar map__14970__$1 = (((((!((map__14970 == null))))?(((((map__14970.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14970.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14970):map__14970);\nvar request = map__14970__$1;\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14970__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nif(cljs.core.truth_(body)){\nvar temp__5733__auto__ = macchiato.middleware.restful_format.parse_accept_header(cljs.core.get_in.cljs$core$IFn$_invoke$arity$3(request,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),\"accept\"], null),cljs.core.get_in.cljs$core$IFn$_invoke$arity$2(request,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129),\"Accept\"], null))));\nif(cljs.core.truth_(temp__5733__auto__)){\nvar parsed_accept_types = temp__5733__auto__;\nreturn cljs.core.first(cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((function (p1__14964_SHARP_){\nreturn cljs.core.not_any_QMARK_(cljs.core.PersistentHashSet.createAsIfByAssoc([p1__14964_SHARP_]),cljs.core.set(accept_types));\n}),parsed_accept_types));\n} else {\nreturn null;\n}\n} else {\nreturn null;\n}\n});\nmacchiato.middleware.restful_format.format_response_body = (function macchiato$middleware$restful_format$format_response_body(request,response,accept_types,transit_opts,raise){\ntry{var temp__5733__auto__ = macchiato.middleware.restful_format.infer_response_content_type(request,accept_types);\nif(cljs.core.truth_(temp__5733__auto__)){\nvar accept_type = temp__5733__auto__;\nreturn macchiato.util.response.content_type(cljs.core.update.cljs$core$IFn$_invoke$arity$3(response,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),(function (p1__14975_SHARP_){\nreturn macchiato.middleware.restful_format.serialize_response.cljs$core$IFn$_invoke$arity$1(new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null,\"type\",\"type\",1174270348),accept_type,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),p1__14975_SHARP_,new cljs.core.Keyword(null,\"transit-opts\",\"transit-opts\",1104386010),transit_opts], null));\n})),accept_type);\n} else {\nreturn response;\n}\n}catch (e14976){if((e14976 instanceof Error)){\nvar e = e14976;\nreturn (raise.cljs$core$IFn$_invoke$arity$1 ? raise.cljs$core$IFn$_invoke$arity$1(e) : raise.call(null,e));\n} else {\nthrow e14976;\n\n}\n}});\nmacchiato.middleware.restful_format.parse_request_body = (function macchiato$middleware$restful_format$parse_request_body(request,content,body,keywordize_QMARK_,transit_opts){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(request,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),macchiato.middleware.restful_format.deserialize_request.cljs$core$IFn$_invoke$arity$1(cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(content,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669),body,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([new cljs.core.Keyword(null,\"keywordize?\",\"keywordize?\",-234306912),keywordize_QMARK_,new cljs.core.Keyword(null,\"transit-opts\",\"transit-opts\",1104386010),transit_opts], 0))));\n});\n/**\n * attempts to infer the request content type using the content-type header\n * serializes the response based on the first known accept header\n * \n * the handler can be followed by a map of options\n * \n * option keys:\n * :content-types a set of strings matching the content types\n * :accept-types a set of strings mactching accept types, ressolves in client preferred order\n * :keywordize? a boolean specifying whether to keywordize the parsed JSON request body\n * :transit-opts a map containing transit configuration options of the form\n *   {:reader {:type ... :opts ...}\n *    :writer {:type ... :opts ...}\n *   where :type and :opts are exactly as defined in the transit spec\n */\nmacchiato.middleware.restful_format.wrap_restful_format = (function macchiato$middleware$restful_format$wrap_restful_format(var_args){\nvar args__4742__auto__ = [];\nvar len__4736__auto___15038 = arguments.length;\nvar i__4737__auto___15039 = (0);\nwhile(true){\nif((i__4737__auto___15039 < len__4736__auto___15038)){\nargs__4742__auto__.push((arguments[i__4737__auto___15039]));\n\nvar G__15040 = (i__4737__auto___15039 + (1));\ni__4737__auto___15039 = G__15040;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4743__auto__ = ((((1) < args__4742__auto__.length))?(new cljs.core.IndexedSeq(args__4742__auto__.slice((1)),(0),null)):null);\nreturn macchiato.middleware.restful_format.wrap_restful_format.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__4743__auto__);\n});\n\n(macchiato.middleware.restful_format.wrap_restful_format.cljs$core$IFn$_invoke$arity$variadic = (function (handler,p__14988){\nvar vec__14990 = p__14988;\nvar map__14993 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__14990,(0),null);\nvar map__14993__$1 = (((((!((map__14993 == null))))?(((((map__14993.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__14993.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__14993):map__14993);\nvar content_types = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14993__$1,new cljs.core.Keyword(null,\"content-types\",\"content-types\",1736685783));\nvar accept_types = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14993__$1,new cljs.core.Keyword(null,\"accept-types\",\"accept-types\",-1068042932));\nvar keywordize_QMARK_ = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14993__$1,new cljs.core.Keyword(null,\"keywordize?\",\"keywordize?\",-234306912));\nvar transit_opts = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__14993__$1,new cljs.core.Keyword(null,\"transit-opts\",\"transit-opts\",1104386010));\nvar content_types__$1 = (function (){var or__4126__auto__ = content_types;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn macchiato.middleware.restful_format.default_content_types;\n}\n})();\nvar accept_types__$1 = cljs.core.clj__GT_js((function (){var or__4126__auto__ = accept_types;\nif(cljs.core.truth_(or__4126__auto__)){\nreturn or__4126__auto__;\n} else {\nreturn macchiato.middleware.restful_format.default_accept_types;\n}\n})());\nreturn (function (p__15000,respond,raise){\nvar map__15001 = p__15000;\nvar map__15001__$1 = (((((!((map__15001 == null))))?(((((map__15001.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__15001.cljs$core$ISeq$))))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__15001):map__15001);\nvar request = map__15001__$1;\nvar headers = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__15001__$1,new cljs.core.Keyword(null,\"headers\",\"headers\",-835030129));\nvar body = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__15001__$1,new cljs.core.Keyword(null,\"body\",\"body\",-2049205669));\nvar respond__$1 = (function (response){\nvar G__15004 = macchiato.middleware.restful_format.format_response_body(request,response,accept_types__$1,new cljs.core.Keyword(null,\"writer\",\"writer\",-277568236).cljs$core$IFn$_invoke$arity$1(transit_opts),raise);\nreturn (respond.cljs$core$IFn$_invoke$arity$1 ? respond.cljs$core$IFn$_invoke$arity$1(G__15004) : respond.call(null,G__15004));\n});\nvar content = macchiato.middleware.restful_format.infer_request_content_type(headers,content_types__$1);\nif(cljs.core.truth_((function (){var and__4115__auto__ = body;\nif(cljs.core.truth_(and__4115__auto__)){\nreturn content;\n} else {\nreturn and__4115__auto__;\n}\n})())){\nvar handle = (function macchiato$middleware$restful_format$handle(body__$1){\ntry{var G__15016 = macchiato.middleware.restful_format.parse_request_body(request,content,body__$1,keywordize_QMARK_,new cljs.core.Keyword(null,\"reader\",\"reader\",169660853).cljs$core$IFn$_invoke$arity$1(transit_opts));\nvar G__15017 = respond__$1;\nvar G__15018 = raise;\nreturn (handler.cljs$core$IFn$_invoke$arity$3 ? handler.cljs$core$IFn$_invoke$arity$3(G__15016,G__15017,G__15018) : handler.call(null,G__15016,G__15017,G__15018));\n}catch (e15015){if((e15015 instanceof Error)){\nvar e = e15015;\nreturn (raise.cljs$core$IFn$_invoke$arity$1 ? raise.cljs$core$IFn$_invoke$arity$1(e) : raise.call(null,e));\n} else {\nthrow e15015;\n\n}\n}});\nif(typeof body === 'string'){\nreturn handle(body);\n} else {\nreturn body.pipe((new macchiato.middleware.restful_format.concat_stream((function (body__$1){\nreturn handle(body__$1);\n}))));\n}\n} else {\nreturn (handler.cljs$core$IFn$_invoke$arity$3 ? handler.cljs$core$IFn$_invoke$arity$3(request,respond__$1,raise) : handler.call(null,request,respond__$1,raise));\n}\n});\n}));\n\n(macchiato.middleware.restful_format.wrap_restful_format.cljs$lang$maxFixedArity = (1));\n\n/** @this {Function} */\n(macchiato.middleware.restful_format.wrap_restful_format.cljs$lang$applyTo = (function (seq14984){\nvar G__14985 = cljs.core.first(seq14984);\nvar seq14984__$1 = cljs.core.next(seq14984);\nvar self__4723__auto__ = this;\nreturn self__4723__auto__.cljs$core$IFn$_invoke$arity$variadic(G__14985,seq14984__$1);\n}));\n\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","macchiato/middleware/restful_format.cljs","~:line",1,"~:column",5,"~:end-line",1,"~:end-column",40],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$clojure.pprint","~$cljs.pprint"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$macchiato.middleware.restful-format","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$t","~$cognitect.transit","~$macchiato.util.response","^J","~$macchiato.util.request","^K","~$r","^J","~$cljs.core","^L","~$goog","^M","^I","^I","~$cljs.nodejs","^N","~$node","^N","~$cljs.reader","^P","~$edn","^P","~$rq","^K"],"~:seen",["^B",["~:require"]],"~:uses",null,"~:require-macros",["^ ","^L","^L","^P","^P","^Q","^P"],"~:form",["~#list",["~$ns","^D",["^X",["^T",["^N","~:as","^O"],["^I","^Z","~$t"],["^P","^Z","^Q"],["^K","^Z","^R"],["^J","^Z","~$r"]]]]],"~:flags",["^ ","^T",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^M","^L","^N","^I","^P","^K","^J"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","macchiato/middleware/restful_format.cljs"],"~:compiled-at",1719701909929,"~:resource-name","macchiato/middleware/restful_format.cljs","~:warnings",[],"~:source","(ns macchiato.middleware.restful-format\n  (:require\n    [cljs.nodejs :as node]\n    [cognitect.transit :as t]\n    [cljs.reader :as edn]\n    [macchiato.util.request :as rq]\n    [macchiato.util.response :as r]))\n\n(def concat-stream (node/require \"concat-stream\"))\n\n(def ct (node/require \"content-type\"))\n\n(def lru (let [LRUCache (node/require \"lru\")]\n           (LRUCache. #js {:maxElementsToStore 500})))\n\n(defn parse-accept-header [accept-header]\n  (or\n    (.get lru accept-header)\n    (let [parsed-header (map #(str (:type %) \"/\" (:sub-type %))\n                             (rq/accept accept-header))]\n      (.set lru accept-header parsed-header)\n      parsed-header)))\n\n(def default-content-types\n  #{\"application/json\"\n    \"application/transit+json\"})\n\n(def default-accept-types\n  #{\"application/json\"\n    \"application/transit+json\"})\n\n;; request content type multimethods for decoding the request body\n(defmulti deserialize-request :type)\n\n(defmethod deserialize-request \"application/json\"\n  [{:keys [body keywordize?]}]\n  (js->clj (js/JSON.parse body) :keywordize-keys keywordize?))\n\n(defmethod deserialize-request \"application/transit+json\"\n  [{:keys [body transit-opts]}]\n  (let [reader (t/reader (or (:type transit-opts) :json) (:opts transit-opts))]\n    (t/read reader body)))\n\n;; response accept multimethods for serializing the response\n(defmulti serialize-response :type)\n\n(defmethod serialize-response \"application/json\"\n  [{:keys [body]}]\n  (js/JSON.stringify (clj->js body)))\n\n(defmethod serialize-response \"application/transit+json\"\n  [{:keys [body transit-opts]}]\n  (let [writer (t/writer (or (:type transit-opts) :json) (:opts transit-opts))]\n    (t/write writer body)))\n\n(defn infer-request-content-type [headers content-types]\n  (when-let [content-type (some->> (get headers \"content-type\") (.parse ct))]\n    (when-let [type (get content-types (.-type content-type))]\n      {:type type})))\n\n(defn infer-response-content-type [{:keys [body] :as request} accept-types]\n  (when body\n    (if-let [parsed-accept-types (parse-accept-header\n                                   (get-in request [:headers \"accept\"]\n                                           (get-in request [:headers \"Accept\"])))]\n      (first (drop-while #(not-any? #{%} (set accept-types)) parsed-accept-types)))))\n\n(defn format-response-body [request response accept-types transit-opts raise]\n  (try\n    (if-let [accept-type (infer-response-content-type request accept-types)]\n      (-> response\n          (update :body #(serialize-response {:type accept-type\n                                              :body %\n                                              :transit-opts transit-opts}))\n          (r/content-type accept-type))\n      response)\n    (catch js/Error e\n      (raise e))))\n\n(defn- parse-request-body [request content body keywordize? transit-opts]\n  (assoc request\n         :body (deserialize-request\n                (assoc content\n                       :body body\n                       :keywordize? keywordize?\n                       :transit-opts transit-opts))))\n\n(defn\n  ^{:macchiato/middleware\n    {:id :wrap-restful-format}}\n  wrap-restful-format\n  \"attempts to infer the request content type using the content-type header\n   serializes the response based on the first known accept header\n\n   the handler can be followed by a map of options\n\n   option keys:\n   :content-types a set of strings matching the content types\n   :accept-types a set of strings mactching accept types, ressolves in client preferred order\n   :keywordize? a boolean specifying whether to keywordize the parsed JSON request body\n   :transit-opts a map containing transit configuration options of the form\n     {:reader {:type ... :opts ...}\n      :writer {:type ... :opts ...}\n     where :type and :opts are exactly as defined in the transit spec\"\n  [handler & [{:keys [content-types accept-types keywordize? transit-opts]}]]\n  (let [content-types (or content-types default-content-types)\n        accept-types  (clj->js (or accept-types default-accept-types))]\n    (fn [{:keys [headers body] :as request} respond raise]\n      (let [respond (fn [response]\n                      (respond (format-response-body\n                                 request\n                                 response\n                                 accept-types\n                                 (:writer transit-opts)\n                                 raise)))\n            content (infer-request-content-type headers content-types)]\n        (if (and body content)\n          (letfn [(handle [body]\n                    (try\n                      (-> (parse-request-body request content body keywordize? (:reader transit-opts))\n                          (handler respond raise))\n                      (catch js/Error e\n                        (raise e))))]\n            (if (string? body)\n              (handle body)\n              (.pipe body\n                     (concat-stream.\n                      (fn [body]\n                        (handle body))))))\n          (handler request respond raise))))))\n","~:reader-features",["^B",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings","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","names",["macchiato.middleware.restful-format/concat-stream","cljs.nodejs/require","macchiato.middleware.restful-format/ct","macchiato.middleware.restful-format/lru","LRUCache","macchiato.middleware.restful-format/parse-accept-header","accept-header","or__4126__auto__","parsed-header","p1__14936#","cljs.core.map","macchiato.util.request/accept","macchiato.middleware.restful-format/default-content-types","macchiato.middleware.restful-format/default-accept-types","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","cljs.core.get","fexpr__14937","cljs.core/MultiFn","cljs.core.symbol","macchiato.middleware.restful-format/deserialize-request","p__14938","map__14939","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","body","keywordize?","cljs.core.js__GT_clj","js/JSON.parse","p__14941","map__14942","transit-opts","reader","cognitect.transit.reader","cognitect.transit/read","fexpr__14951","macchiato.middleware.restful-format/serialize-response","p__14955","map__14956","js/JSON.stringify","cljs.core/clj->js","p__14958","map__14959","writer","cognitect.transit.writer","cognitect.transit/write","macchiato.middleware.restful-format/infer-request-content-type","headers","content-types","temp__5735__auto__","content-type","G__14961","type","p__14967","map__14970","macchiato.middleware.restful-format/infer-response-content-type","request","accept-types","temp__5733__auto__","parsed-accept-types","cljs.core.get_in","cljs.core/first","p1__14964#","cljs.core.drop_while","cljs.core/not-any?","cljs.core/set","macchiato.middleware.restful-format/format-response-body","response","raise","e14976","accept-type","p1__14975#","cljs.core.update","macchiato.util.response/content-type","js/Error","e","macchiato.middleware.restful-format/parse-request-body","content","cljs.core.assoc","var_args","args__4742__auto__","len__4736__auto__","i__4737__auto__","argseq__4743__auto__","cljs.core/IndexedSeq","macchiato.middleware.restful-format/wrap-restful-format","p__14988","vec__14990","map__14993","cljs.core.nth","seq14984","G__14985","cljs.core/next","self__4723__auto__","handler","p__15000","map__15001","respond","G__15004","and__4115__auto__","e15015","G__15016","G__15017","G__15018","handle"]],"~:used-vars",["^B",["~$cljs.core/MultiFn","~$macchiato.util.response/content-type","~$macchiato.middleware.restful-format/infer-response-content-type","~$macchiato.middleware.restful-format/lru","~$cljs.core/not-any?","~$cljs.core/drop-while","~$js/JSON.stringify","~$cognitect.transit/read","~$cljs.core/js->clj","~$cljs.core/set","~$macchiato.middleware.restful-format/default-content-types","~$macchiato.middleware.restful-format/infer-request-content-type","~$cljs.core/update","~$macchiato.middleware.restful-format/format-response-body","~$macchiato.middleware.restful-format/concat-stream","~$cognitect.transit/write","~$cljs.core/-add-method","~$macchiato.middleware.restful-format/parse-accept-header","~$macchiato.middleware.restful-format/wrap-restful-format","~$cljs.core/clj->js","~$cljs.core/symbol","~$macchiato.middleware.restful-format/ct","~$macchiato.middleware.restful-format/parse-request-body","~$macchiato.middleware.restful-format/default-accept-types","~$cljs.core/assoc","~$cljs.nodejs/require","~$macchiato.middleware.restful-format/deserialize-request","~$cljs.core/first","~$macchiato.middleware.restful-format/serialize-response","~$js/JSON.parse","~$js/Error"]]],"~:cache-keys",["~#cmap",[["^13","goog/dom/tagname.js"],["6025affb7181cd40418600864f58eed1ea80055d","~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^B",[]],"~:deps-syms",["^M","~$goog.dom.HtmlElement"]]],["^13","cljs/nodejs.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L"]]],["^13","cuerdas/vendor/xregexp.cljs"],["9ba9f8ed128a3c607c8b81217a06b6098d2484d1","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$shadow.js.shim.module$xregexp"]]],["^13","cljs/tools/reader/impl/utils.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$clojure.string","~$goog.string"]]],["^13","goog/math/math.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$goog.array","~$goog.asserts"]]],["^13","goog/html/trustedtypes.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/labs/useragent/browser.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^13","goog/html/safeurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^2@"]]],["^13","goog/array/array.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2="]]],["^13","com/cognitect/transit/impl/reader.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$com.cognitect.transit.impl.decoder","~$com.cognitect.transit.caching"]]],["^13","goog/debug/error.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","cljs/tools/reader/edn.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$cljs.tools.reader.impl.errors","~$cljs.tools.reader.reader-types","~$cljs.tools.reader.impl.utils","~$cljs.tools.reader.impl.commons","~$cljs.tools.reader","^2;","~$goog.string.StringBuffer"]]],["^13","macchiato/fs.cljs"],["465a3636de3448f8a4b786963b1f2d29f754e442","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$shadow.js.shim.module$fs"]]],["^13","goog/dom/nodetype.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","cuerdas/regexp.cljc"],["c61425167ae2b0c9407404dcf4c5e407dea7336c","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$cuerdas.vendor.xregexp","^2;"]]],["^13","cljs/tools/reader/impl/inspect.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L"]]],["^13","com/cognitect/transit/util.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2?"]]],["^13","cljs/tools/reader.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2J","^2K","^2L","^2I","^2<","^2;","^2N"]]],["^13","goog/string/typedstring.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/object/object.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/dom/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2="]]],"~:SHADOW-TIMESTAMP",[1719461811000,1719461811000,1719461795000],["^13","goog/math/long.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","~$goog.reflect"]]],["^13","goog/html/trustedresourceurl.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","~$goog.html.trustedtypes","^2C","^2D","^2E","^2F"]]],["^13","goog/string/internal.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/functions/functions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/html/safestyle.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","~$goog.html.SafeUrl","^2E","^2F","^2@"]]],["^13","goog/dom/safe.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^2T","^2B","~$goog.html.uncheckedconversions","^2E","^2@"]]],["^13","clojure/walk.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L"]]],["^13","goog/structs/map.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^13","com/cognitect/transit/delimiters.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/html/safehtml.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","~$goog.dom.TagName","~$goog.dom.tags","^2X","^2Y","~$goog.html.SafeStyleSheet","^2T","^2B","^2S","^2C","^2D","~$goog.labs.userAgent.browser","^2?","^2E","^2F","^2@"]]],["^13","goog/dom/tags.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2?"]]],["^13","com/cognitect/transit/impl/decoder.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$com.cognitect.transit.util","~$com.cognitect.transit.delimiters","^2H","~$com.cognitect.transit.types"]]],["^13","cljs/reader.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2?","^2M","~$cljs.tools.reader.edn","^2N"]]],["^13","goog/asserts/asserts.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^13","goog/uri/uri.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","^2;","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^13","goog/i18n/bidi.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","macchiato/middleware/restful_format.cljs"],["94182c6467e2c436440184eb2b5c2d27bf9d3120","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^N","^I","^P","^K","^J"]]],["^13","goog/fs/url.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/base.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",[]]],["^13","goog/structs/structs.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2?"]]],["^13","cljs/tools/reader/impl/errors.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2J","^2:","~$cljs.tools.reader.impl.inspect"]]],["^13","macchiato/util/response.cljs"],["94182c6467e2c436440184eb2b5c2d27bf9d3120","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$clojure.walk","^I","~$cuerdas.core","~$macchiato.fs"]]],["^13","clojure/string.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2;","^2N"]]],["^13","com/cognitect/transit/handlers.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^35","^37","~$goog.math.Long"]]],["^13","goog/string/string.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","~$goog.dom.safe","^2Z","^2E","^2@"]]],["~:shadow.build.js-support/require","fs"],["^2O","shadow.js.shim.module$fs.js","require","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","com/cognitect/transit/types.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^35","~$com.cognitect.transit.eq","^3D"]]],["^13","goog/reflect/reflect.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","goog/labs/useragent/util.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2@"]]],["^13","com/cognitect/transit/eq.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^35"]]],["^13","goog/string/stringbuffer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","macchiato/util/request.cljs"],["94182c6467e2c436440184eb2b5c2d27bf9d3120","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^3B"]]],["^13","cljs/tools/reader/reader_types.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2K","^2;","^2N"]]],["^13","goog/iter/iter.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","^2V","~$goog.math"]]],["^13","goog/html/uncheckedconversions.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","^2W","^2X","^2Y","^33","^2T","^2B","^2E","^2@"]]],["^13","com/cognitect/transit/caching.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^36"]]],["^3F","xregexp"],["^29","shadow.js.shim.module$xregexp.js","require","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","cljs/tools/reader/impl/commons.cljs"],["b4dce2f71625d60fe1fd6a95816017811dd73522","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2I","^2J","^2K"]]],["^13","goog/dom/htmlelement.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M"]]],["^13","cljs/core.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^3D","~$goog.math.Integer","^2;","^2?","^2<","~$goog.Uri","^2N"]]],["^13","com/cognitect/transit.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^35","~$com.cognitect.transit.impl.reader","~$com.cognitect.transit.impl.writer","^37","^3G","^2G","^2H"]]],["^13","goog/html/safescript.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","^2S","^2E","^2F"]]],["^13","goog/html/safestylesheet.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","^2Y","^2?","^2E","^2F","^2@"]]],["^13","goog/math/integer.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2R"]]],["^13","clojure/set.cljs"],["2b61436b8e6c3d6d48282f388e875faa3ffc3422","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L"]]],["^13","goog/uri/utils.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2<","^2=","^2;"]]],["^13","goog/string/const.js"],["6025affb7181cd40418600864f58eed1ea80055d","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^2=","^2F"]]],["^13","com/cognitect/transit/impl/writer.js"],["01d599615e2538e52fcbfe28dfb19148824a8944","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^35","^2H","~$com.cognitect.transit.handlers","^37","^36","^3D"]]],["^13","cuerdas/core.cljc"],["c61425167ae2b0c9407404dcf4c5e407dea7336c","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","^2:","~$clojure.set","^3A","~$cuerdas.regexp","^2;","^P"]]],["^13","cognitect/transit.cljs"],["ad84ab433eb8b60faeacb580428cb748997b0ff3","^24",["^ ","^25",null,"^26",["^B",[]],"^27",["^M","^L","~$com.cognitect.transit","^37","^3G","^3D"]]]]],"~:clj-info",["^ ","jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/env.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/data.json/1.0.0/data.json-1.0.0.jar!/clojure/data/json.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64_vlq.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/js_deps.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/reader.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map/base64.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/core.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/analyzer.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/externs.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/compiler.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/source_map.clj",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1719461794000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/tagged_literals.cljc",1719461795000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/cljs/tools/reader/reader_types.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1719461781000,"jar:file:/home/valdir/.m2/repository/org/clojure/clojurescript/1.10.758/clojurescript-1.10.758.jar!/cljs/util.cljc",1719461795000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",1,"^8",5,"^9",1,"^:",40],"^;",["^ ","^<","^=","^>","^?"],"^@",null,"^A",["^B",[]],"~:shadow/js-access-properties",["^B",["stringify","parse"]],"^C","^D","^G",null,"^H",["^ ","~$t","^I","^J","^J","^K","^K","~$r","^J","^L","^L","^M","^M","^I","^I","^N","^N","^O","^N","^P","^P","^Q","^P","^R","^K"],"^S",["^B",["^T"]],"~:shadow/js-access-global",["^B",["JSON","Error"]],"^U",null,"~:defs",["^ ","~$parse-accept-header",["^ ","~:protocol-inline",null,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",16,"^8",7,"^9",16,"^:",26,"~:arglists",["^X",["~$quote",["^X",[["~$accept-header"]]]]]],"^C","^1P","^6","macchiato/middleware/restful_format.cljs","^:",26,"~:method-params",["^X",[["^4H"]]],"~:protocol-impl",null,"~:arglists-meta",["^X",[null,null]],"^8",1,"~:variadic?",false,"^7",16,"~:ret-tag",["^B",["~$any","~$cljs.core/LazySeq"]],"^9",16,"~:max-fixed-arity",1,"~:fn-var",true,"^4F",["^X",["^4G",["^X",[["^4H"]]]]]],"~$wrap-restful-format",["^ ","^4E",null,"^5",["^ ","~:macchiato/middleware",["^ ","~:id","~:wrap-restful-format"],"^6","macchiato/middleware/restful_format.cljs","^:",22,"~:top-fn",["^ ","^4L",true,"~:fixed-arity",1,"^4P",1,"^4I",[["^X",["~$handler",[["^ ","~:keys",["~$content-types","~$accept-types","~$keywordize?","~$transit-opts"]]]]]],"^4F",["^X",[["^4X","~$&",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]],"^4K",["^X",[null]]],"^8",3,"^7",91,"^9",91,"^4F",["^X",["^4G",["^X",[["^4X","~$&",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]]]],"~:doc","attempts to infer the request content type using the content-type header\n   serializes the response based on the first known accept header\n\n   the handler can be followed by a map of options\n\n   option keys:\n   :content-types a set of strings matching the content types\n   :accept-types a set of strings mactching accept types, ressolves in client preferred order\n   :keywordize? a boolean specifying whether to keywordize the parsed JSON request body\n   :transit-opts a map containing transit configuration options of the form\n     {:reader {:type ... :opts ...}\n      :writer {:type ... :opts ...}\n     where :type and :opts are exactly as defined in the transit spec"],"^4S",["^ ","^4T","^4U"],"^C","^1Q","^6","macchiato/middleware/restful_format.cljs","^:",22,"^4V",["^ ","^4L",true,"^4W",1,"^4P",1,"^4I",[["^X",["^4X",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]],"^4F",["^X",[["^4X","~$&",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]],"^4K",["^X",[null]]],"^4I",[["^X",["^4X",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]],"^4J",null,"^4W",1,"^4K",["^X",[null]],"^8",1,"^4L",true,"~:methods",[["^ ","^4W",1,"^4L",true,"~:tag","~$function"]],"^7",88,"^4M","^4N","^9",91,"^4P",1,"^4Q",true,"^4F",["^X",[["^4X","~$&",[["^ ","^4Y",["^4Z","^4[","^50","^51"]]]]]],"^52","attempts to infer the request content type using the content-type header\n   serializes the response based on the first known accept header\n\n   the handler can be followed by a map of options\n\n   option keys:\n   :content-types a set of strings matching the content types\n   :accept-types a set of strings mactching accept types, ressolves in client preferred order\n   :keywordize? a boolean specifying whether to keywordize the parsed JSON request body\n   :transit-opts a map containing transit configuration options of the form\n     {:reader {:type ... :opts ...}\n      :writer {:type ... :opts ...}\n     where :type and :opts are exactly as defined in the transit spec"],"~$parse-request-body",["^ ","^4E",null,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",80,"^8",8,"^9",80,"^:",26,"~:private",true,"^4F",["^X",["^4G",["^X",[["~$request","~$content","~$body","^50","^51"]]]]]],"^57",true,"^C","^1U","^6","macchiato/middleware/restful_format.cljs","^:",26,"^4I",["^X",[["^58","^59","^5:","^50","^51"]]],"^4J",null,"^4K",["^X",[null,null]],"^8",1,"^4L",false,"^7",80,"^4M",["^B",["~$clj","^4N"]],"^9",80,"^4P",5,"^4Q",true,"^4F",["^X",["^4G",["^X",[["^58","^59","^5:","^50","^51"]]]]]],"~$ct",["^ ","^C","^1T","^6","macchiato/middleware/restful_format.cljs","^7",11,"^8",1,"^9",11,"^:",8,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",11,"^8",6,"^9",11,"^:",8],"^54","^4N"],"~$default-accept-types",["^ ","^C","^1V","^6","macchiato/middleware/restful_format.cljs","^7",28,"^8",1,"^9",28,"^:",26,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",28,"^8",6,"^9",28,"^:",26],"^54","~$cljs.core/ISet"],"~$deserialize-request",["^ ","^C","^1Y","^6","macchiato/middleware/restful_format.cljs","^7",33,"^8",1,"^9",33,"^:",30,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",33,"^8",11,"^9",33,"^:",30],"^54","^1?"],"~$serialize-response",["^ ","^C","^1[","^6","macchiato/middleware/restful_format.cljs","^7",45,"^8",1,"^9",45,"^:",29,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",45,"^8",11,"^9",45,"^:",29],"^54","^1?"],"~$lru",["^ ","^C","^1B","^6","macchiato/middleware/restful_format.cljs","^7",13,"^8",1,"^9",13,"^:",9,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",13,"^8",6,"^9",13,"^:",9],"^54","~$LRUCache"],"~$infer-response-content-type",["^ ","^4E",null,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",61,"^8",7,"^9",61,"^:",34,"^4F",["^X",["^4G",["^X",[[["^ ","^4Y",["^5:"],"^Z","^58"],"^4["]]]]]],"^C","^1A","^6","macchiato/middleware/restful_format.cljs","^:",34,"^4I",["^X",[["~$p__14967","^4["]]],"^4J",null,"^4K",["^X",[null,null]],"^8",1,"^4L",false,"^7",61,"^4M",["^B",["^4N","~$clj-nil"]],"^9",61,"^4P",2,"^4Q",true,"^4F",["^X",["^4G",["^X",[[["^ ","^4Y",["^5:"],"^Z","^58"],"^4["]]]]]],"~$default-content-types",["^ ","^C","^1I","^6","macchiato/middleware/restful_format.cljs","^7",24,"^8",1,"^9",24,"^:",27,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",24,"^8",6,"^9",24,"^:",27],"^54","^5>"],"~$infer-request-content-type",["^ ","^4E",null,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",56,"^8",7,"^9",56,"^:",33,"^4F",["^X",["^4G",["^X",[["~$headers","^4Z"]]]]]],"^C","^1J","^6","macchiato/middleware/restful_format.cljs","^:",33,"^4I",["^X",[["^5H","^4Z"]]],"^4J",null,"^4K",["^X",[null,null]],"^8",1,"^4L",false,"^7",56,"^4M",["^B",["~$cljs.core/IMap","^5E"]],"^9",56,"^4P",2,"^4Q",true,"^4F",["^X",["^4G",["^X",[["^5H","^4Z"]]]]]],"~$format-response-body",["^ ","^4E",null,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",68,"^8",7,"^9",68,"^:",27,"^4F",["^X",["^4G",["^X",[["^58","~$response","^4[","^51","~$raise"]]]]]],"^C","^1L","^6","macchiato/middleware/restful_format.cljs","^:",27,"^4I",["^X",[["^58","^5K","^4[","^51","^5L"]]],"^4J",null,"^4K",["^X",[null,null]],"^8",1,"^4L",false,"^7",68,"^9",68,"^4P",5,"^4Q",true,"^4F",["^X",["^4G",["^X",[["^58","^5K","^4[","^51","^5L"]]]]]],"~$concat-stream",["^ ","^C","^1M","^6","macchiato/middleware/restful_format.cljs","^7",9,"^8",1,"^9",9,"^:",19,"^5",["^ ","^6","macchiato/middleware/restful_format.cljs","^7",9,"^8",6,"^9",9,"^:",19],"^54","^4N"]],"^V",["^ ","^L","^L","^P","^P","^Q","^P"],"~:cljs.analyzer/constants",["^ ","^S",["^B",["~:keywordize?","~:else","~:default","~:accept-types","~:type","~:headers","~:sub-type","~:writer","~:opts","~:reader","~:content-types","~:json","~:transit-opts","~:hierarchy","~:body","~:keywordize-keys"]],"~:order",["^5S","^5U","^60","^5Q","^61","^5O","^62","^5[","^5Z","^5W","^5T","^5P","^5Y","^5R","^5V","^5X"]],"^[",["^ ","^T",["^B",[]]],"^10",["^ "],"^11",["^M","^L","^N","^I","^P","^K","^J"]],"^F","^D","~:ns-specs",["^ "],"~:ns-spec-vars",["^B",[]],"~:compiler-options",["^23",[["^66","~:static-fns"],true,["^66","~:shadow-tweaks"],null,["^66","~:source-map-inline"],null,["^66","~:elide-asserts"],true,["^66","~:optimize-constants"],null,["^66","^16"],null,["^66","~:external-config"],null,["^66","~:tooling-config"],null,["^66","~:emit-constants"],null,["^66","~:load-tests"],false,["^66","~:form-size-threshold"],null,["^66","~:infer-externs"],true,["^66","^18"],null,["~:js-options","~:js-provider"],"^T",["~:mode"],"~:release",["^66","~:fn-invoke-direct"],null,["^66","~:source-map"],null]]]